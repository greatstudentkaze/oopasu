@if (Href is not null)
{
    <a 
        class="btn @GetButtonStyleClassName() @ClassName" 
        href="@Href" 
        @onclick="InvokeOnClick"
    >
        @ChildContent
    </a>
}
else
{
    <button 
        class="btn @GetButtonStyleClassName() @ClassName" 
        type="@Type" 
        @onclick="InvokeOnClick"
        disabled="@Disabled"
    >
        @ChildContent
    </button> 
}

    

@code {
    [Parameter]
    public string Href { get; set; }
    [Parameter]
    public string Type { get; set; } = "button";
    [Parameter]
    public string ClassName { get; set; }
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public ButtonStyle Style { get; set; } = ButtonStyle.Primary;
    [Parameter]
    public Action OnClick { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private void InvokeOnClick()
    {
        OnClick?.Invoke();
    }

    private string GetButtonStyleClassName()
    {
        switch (Style)
        {
            case ButtonStyle.Primary:
                return "btn-primary";
            case ButtonStyle.Success:
                return "btn-success";
            case ButtonStyle.Danger:
                return "btn-danger";
            case ButtonStyle.Link:
                return "btn-link";
            default:
                return "btn-primary";
        }
    }
    
    public enum ButtonStyle
    {
        Primary,
        Success,
        Danger,
        Link
    }
}
