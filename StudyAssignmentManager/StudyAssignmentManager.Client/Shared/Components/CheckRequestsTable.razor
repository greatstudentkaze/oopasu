@using StudyAssignmentManager.Domain
@using System.Globalization
@using System.Net.Http.Json
@using StudyAssignmentManager.Domain.Enums

@inject HttpClient client;

<table class="table table-striped table-hover @ClassName">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Задание</th>
            <th scope="col">Студент</th>
            <th scope="col">Создана</th>
            <th scope="col">Статус</th>
            <th scope="col">Принять</th>
            <th scope="col">Отклонить</th>
            <th scope="col">Проверить</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var checkRequest in CheckRequests.OrderBy(it => it.Status).ThenByDescending(it => it.CreationDate))
            {
                <tr class="@(checkRequest.Status == CheckRequestStatus.Completed ? "table-success" : "")">
                    <th class="align-middle" scope="row">@checkRequest.Number</th>
                    <td class="align-middle">@checkRequest.Assignment.EducationalMaterial.Title</td>
                    <td class="align-middle">@checkRequest.Assignment.Student.FullName</td>
                    <td class="align-middle">
                        <time datetime="@checkRequest.CreationDate.ToString("yyyy-MM-dd")">
                            @checkRequest.CreationDate.ToString("d MMMM H:mm", CultureInfo.GetCultureInfo("ru-RU"))
                        </time>
                    </td>
                    <td class="align-middle">@GetFormattedStatus(checkRequest.Status)</td>
                    <td class="align-middle">
                        <Button Style="Button.ButtonStyle.Link" Disabled="@checkRequest.Assignment.IsCompleted" OnClick="@(() => ApproveCheckRequest(checkRequest.Id))">
                            <span class="oi oi-check" aria-hidden="true"></span>
                        </Button>
                    </td>
                    <td class="align-middle">
                        <Button Style="Button.ButtonStyle.Link" Disabled="@(checkRequest.Status == CheckRequestStatus.Completed && !checkRequest.Assignment.IsCompleted)" OnClick="@(() => RejectCheckRequest(checkRequest.Id))">
                            <span class="oi oi-x" aria-hidden="true"></span>
                        </Button>
                    </td>
                    <td class="align-middle">
                        <a href="/check-requests/@checkRequest.Id">
                            <span class="oi oi-chevron-right" aria-hidden="true"></span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

@code {
    [Parameter]
    public List<CheckRequest> CheckRequests { get; set; }
    [Parameter]
    public string ClassName { get; set; }

    private async Task ApproveCheckRequest(Guid id)
    {
        var checkRequestUpdates = new object[]
        {
            new
            {
                op = "replace",
                path = "/status",
                value = CheckRequestStatus.Completed
            },
            new
            {
                op = "replace",
                path = "/assignment/isCompleted",
                value = true,
            }
        };
        var response = await client.PatchAsync($"check-requests/{id}", JsonContent.Create(checkRequestUpdates));
        if (!response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            throw new ApplicationException(content);
        }
        
        var checkRequest = CheckRequests.FirstOrDefault(it => it.Id == id);
        checkRequest.Assignment.IsCompleted = true;
        StateHasChanged();
    }

    private async Task RejectCheckRequest(Guid id)
    {
        var checkRequestUpdates = new object[]
        {
            new
            {
                op = "replace",
                path = "/status",
                value = CheckRequestStatus.Completed
            },
            new
            {
                op = "replace",
                path = "/assignment/isCompleted",
                value = false,
            }
        };
        var response = await client.PatchAsync($"check-requests/{id}", JsonContent.Create(checkRequestUpdates));
        if (!response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            throw new ApplicationException(content);
        }
        
        var checkRequest = CheckRequests.FirstOrDefault(it => it.Id == id);
        checkRequest.Assignment.IsCompleted = false;
        StateHasChanged();
    }

    private string GetFormattedStatus(CheckRequestStatus status)
    {
        @switch (status)
        {
            case CheckRequestStatus.InProgress:
                return "Ожидает проверки";
            case CheckRequestStatus.Completed:
                return "Выполнена";
            default:
                return "Отменена";
        }
    }
}
