@using StudyAssignmentManager.Domain
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using StudyAssignmentManager.Client.Services

@inject IJSRuntime JS
@inject HttpClient client
@inject NavigationManager NavigationManager

@page "/educational-materials/{id}"

<Button Href=@($"/educational-materials/assign?id={id}")>
    Назначить
</Button>
<Button ClassName="ml-2" Href=@($"/educational-materials/edit?id={id}")>
    Изменить
</Button>
<Button ClassName="ml-2" Style="@Button.ButtonStyle.Danger" OnClick="@(() => DeleteEducationalMaterial(new Guid(id)))">
    Удалить
</Button>
@if (educationalMaterial is null)
{
    <Loader />
}
else
{
    <h1>@educationalMaterial.Title</h1>
    <p>@educationalMaterial.Description</p>
    <div id="assignment-data-editorjs" @ref="editorjsElement"></div>
}

@code {
    [Parameter]
    public string id { get; set; }
    private EducationalMaterial educationalMaterial;
    string LastSubmitResult;
    string responseMessage;
    bool isFormRendered;
    
    private ElementReference editorjsElement;
    private IJSObjectReference? editorjsModule;
    private IJSObjectReference? editorjsInstance;

    protected override async Task OnInitializedAsync()
    {
        var response = await client.GetAsync($"educational-materials/{id}");
        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/educational-materials");
        }
        
        educationalMaterial = await response.Content.ReadFromJsonAsync<EducationalMaterial>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isFormRendered && educationalMaterial is not null)
        {
            editorjsModule = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./js/modules/editorjs/index.js");
            editorjsInstance = await editorjsModule.InvokeAsync<IJSObjectReference>(
                "addEditorjs", editorjsElement, educationalMaterial.Content, true);
            isFormRendered = true;
        }
    }
    
    private async Task DeleteEducationalMaterial(Guid id)
    {
        var response = await client.DeleteAsync($"educational-materials/{id}");
        if (!response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            throw new ApplicationException(content);
        }

        NavigationManager.NavigateTo($"/educational-materials");
    }
}
