// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudyAssignmentManager.Domain;
using StudyAssignmentManager.Infrastructure;

namespace StudyAssignmentManager.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211206201353_bunch of updates")]
    partial class bunchofupdates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("StudyAssignmentManager.Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<EditorJSData>("Content")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.CheckRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId")
                        .IsUnique();

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("CheckRequests");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.EducationalMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<EditorJSData>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("EducationalMaterials");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.StudyAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DueDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationalMaterialId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EducationalMaterialId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TutorId");

                    b.ToTable("StudyAssignments");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.Answer", b =>
                {
                    b.HasOne("StudyAssignmentManager.Domain.StudyAssignment", "Assignment")
                        .WithMany("Answers")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.Attachment", b =>
                {
                    b.HasOne("StudyAssignmentManager.Domain.Answer", "Answer")
                        .WithMany("Attachments")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.CheckRequest", b =>
                {
                    b.HasOne("StudyAssignmentManager.Domain.Answer", "Answer")
                        .WithOne("CheckRequest")
                        .HasForeignKey("StudyAssignmentManager.Domain.CheckRequest", "AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.StudyAssignment", "Assignment")
                        .WithMany("CheckRequests")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.User", "Reviewer")
                        .WithMany("CheckRequests")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Assignment");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.Comment", b =>
                {
                    b.HasOne("StudyAssignmentManager.Domain.Answer", "Answer")
                        .WithMany("Comments")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.EducationalMaterial", b =>
                {
                    b.HasOne("StudyAssignmentManager.Domain.User", "Author")
                        .WithMany("EducationalMaterials")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.StudyAssignment", b =>
                {
                    b.HasOne("StudyAssignmentManager.Domain.EducationalMaterial", "EducationalMaterial")
                        .WithMany("Assignments")
                        .HasForeignKey("EducationalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyAssignmentManager.Domain.User", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalMaterial");

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.Answer", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CheckRequest");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.EducationalMaterial", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.StudyAssignment", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CheckRequests");
                });

            modelBuilder.Entity("StudyAssignmentManager.Domain.User", b =>
                {
                    b.Navigation("CheckRequests");

                    b.Navigation("EducationalMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
